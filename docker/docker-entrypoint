#!/bin/bash
echo 'Starting docker container'
set -e

function assertPresence() {
  VARIABLE_NAME=$1
  if [ -z ${!VARIABLE_NAME} ]; then
    echo "${VARIABLE_NAME} is unset. Please set this label to run this docker container"
    exit 1
  fi
}

exec "$@"

echo "Executing wait for postgres script..."
/scripts/wait-for-postgres
python manage.py migrate_with_kazoo --noinput

if [ ${APPLICATION_TYPE} == 'backend' ]; then
  if [ ${ENVIRONMENT} == 'local' ]; then
    exec python manage.py runserver 0:8000
  elif [ ${ENVIRONMENT} == 'ci' ]; then
    exec sleep 3600
  else
    assertPresence "BACKEND_TYPE"
    if [ ${BACKEND_TYPE} == 'web' ]; then
      rm -rf /etc/nginx/conf.d/*
      ln -s /etc/nginx/sites-available/backend.conf /etc/nginx/conf.d/default.conf
      python wsgi_bjoern.py &
      exec nginx -g "daemon off;"
    elif [ ${BACKEND_TYPE} == 'wsgi' ]; then
      cp -r /backend/collected_static/ /
      exec python wsgi_bjoern.py
    fi
  fi
elif [ ${APPLICATION_TYPE} == 'worker' ]; then
  /scripts/wait-for-postgres
  export C_FORCE_ROOT="true"
  echo 'Run Celery task: ' ${CELERY_PROCESS}
  if [ ${CELERY_PROCESS} == 'celerybeat' ]; then
    exec /usr/local/bin/celery -A scheduler worker -n celerybeat@%n -Q celerybeat --without-heartbeat --without-mingle -B -s /tmp/celerybeat-schedule
  elif [ ${CELERY_PROCESS} == 'worker' ]; then
    if [ ${CELERY_QUEUE_NAME} ]; then
      exec /usr/local/bin/celery -A scheduler worker -n ${CELERY_QUEUE_NAME}@%n --concurrency=4 -Q ${CELERY_QUEUE_NAME} --without-heartbeat --without-mingle
    else
      exec /usr/local/bin/celery -A scheduler worker -n ${CELERY_QUEUE_NAME}@%n --concurrency=4 --without-heartbeat --without-mingle
    fi
  fi
else
  echo 'Nothing to run'
fi
