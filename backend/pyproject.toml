[tool.poetry]
name = "email-reader"
version = "0.2.0"
description = ""
authors = ["swojak.a@gmail.com"]

[tool.poetry.dependencies]
python = "^3.11"
Django = "~4.2.0"
celery = "^5.3.1"
django-allow-cidr = "^0.7.1"
django-celery-results = "^2.5.0"
sentry-sdk = "^1.29.0"
django-extensions = "^3.2.3"
redis = "^5.0.0"
psycopg = "^3.1.10"
pika = "^1.3.2"
ipython = "^8.14.0"
django-kazoo-locks = { git = "https://github.com/FutureMind/django-kazoo-locks.git", rev = "v2.0.2" }
isort = "^5.12.0"
black = "^23.7.0"
bjoern = "^3.2.2"
djangorestframework = "^3.14.0"
django-redis = "^5.3.0"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-django = "^4.5.2"
python-logstash-async = "2.5.0"
ruff = "^0.1.5"
drf-spectacular = {extras = ["sidecar"], version = "^0.26.5"}
factory-boy = "^3.3.0"
pydantic = "^2.7.2"

[tool.poetry.dev-dependencies]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]

[tool.coverage.run]
omit = ["*migrations*", "*settings*", "manage.py", "*node_modules*", "*site-packages*", "*distutils*", "*tests*", 'utils']
branch = true
dynamic_context = "test_function"

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "def __str__", "raise NotImplmentedError"]

[tool.coverage.html]
show_contexts = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort] # to be removed for ruff
profile = "black"
known_future_library = ["__future__"]
known_first_party = "modules"
known_django = "django"
include_trailing_comma = "True"
known_third_party = ["rest_framework", "sentry_sdk", "jwt", "rest_framework_jwt", "celery"]
multi_line_output = 3
indent = '    '
skip = ["manage.py", "migrations", "venv", "node_modules", ".venv"]
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.pylint.messages_control]
django-settings-module = "config.settings"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  # Django related
  | migrations
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
  | profiling
)/
'''

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "blib2to3",
    "tests/data",
    "profiling"
]
include = ["*.py", "*.pyi", "**/pyproject.toml"]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py311"

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Whether to show an enumeration of all fixed lint violations (overridden by the --show-fixes command-line flag).
show-fixes = true
show-source = true

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.per-file-ignores]
"test_*.py" = [
    "S101", # asserts allowed in tests
    "ARG", # Unused function args (fixtures)
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
]

[tool.ruff.lint]
select = [
    "B", # flake8-bugbear
    "C901", # mccabe (complexity)
    "D", # pydocstyle
    "DJ001", # django-nullable-model-string-fields
    "DJ008", # django-model-without-dunder-str
    "DTZ", # flake8-datetimez
    "E", # pycodestyle - errors
    "F", # pyflakes
    "I", # isort
    "ISC", # flake8-implicit-str-concat
    "PTH", # use pathlib instead of os.path
    "S", # flake8-bandit
    "W", # pycodestyle - warnings
    "T10", # debugger
    "T20", # prints
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D202", # No blank lines allowed after function docstring
    "D205", # 1 blank line required between summary line and description
    "D206", # indent-with-spaces (docstring) - Formatter handles this
    "D209", # Multi-line docstring closing quotes should be on a separate line
    "D211", # No blank lines allowed before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "D300", # triple-single-quotes (docstring) - Formatter handles this
    "D400", # First line should end with a period
    "D401", # First line of docstring should be in imperative mood
    "D415", # First line should end with a period, question mark, or exclamation point
    "E111", # indentation-with-invalid-multiple - Formatter handles this
    "E114", # indentation-with-invalid-character - Formatter handles this
    "E117", # over-indented - Formatter handles this
    "ISC001", # Implicitly concatenated string literals on one line - Formatter handles this
    "ISC002", # Checks for implicitly concatenated strings that span multiple lines. - Formatter handles this
]

[tool.ruff.lint.isort]
known-first-party = ["modules"]
known-third-party = ["rest_framework", "sentry_sdk", "jwt", "rest_framework_jwt", "celery"]
section-order = ["future", "standard-library", "django", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
# Group all Django imports into a separate section.
"django" = ["django"]


[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "pep257"

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 10
max-complexity = 10
